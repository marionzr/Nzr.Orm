using Nzr.Orm.Core.Attributes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;

namespace Nzr.Orm.Core
{
    /// <summary>
    /// Partial class Dao.
    /// Contains all methods related to schema information.
    /// </summary>
    public partial class Dao
    {
        private string GetTable(Type type, bool includeSchema = true)
        {
            TableAttribute tableAttribute = type.GetCustomAttribute<TableAttribute>();
            string schema = tableAttribute?.Schema ?? Schema;
            string table = tableAttribute?.Name ?? FormatName(type.Name);
            string tableName = includeSchema ? $"[{schema}].{table}" : table;
            return tableName;
        }

        private IDictionary<string, PropertyInfo> GetColumns(Type type, bool includeForeingKeys = false)
        {
            IDictionary<string, PropertyInfo> columns = new Dictionary<string, PropertyInfo>();
            GetColumns(ref columns, type, includeForeingKeys);

            return columns;
        }

        private void GetColumns(ref IDictionary<string, PropertyInfo> columns, Type type, bool includeForeingKeys = false)
        {
            PropertyInfo[] properties = type.GetProperties();
            IDictionary<string, PropertyInfo> currEntityColumns = properties
                .Where(p => p.GetCustomAttribute<NotMappedAttribute>() == null)
                .ToDictionary(p => GetColumnName(type, p), p => p);

            foreach (KeyValuePair<string, PropertyInfo> column in currEntityColumns)
            {
                columns.Add(column);

                if (includeForeingKeys)
                {
                    ForeignKeyAttribute foreinKeyAttribute = column.Value.GetCustomAttribute<ForeignKeyAttribute>();

                    if (foreinKeyAttribute != null)
                    {
                        GetColumns(ref columns, column.Value.PropertyType, includeForeingKeys);
                    }
                }
            }
        }

        private string GetColumnName(Type type, PropertyInfo property)
        {
            ColumnAttribute columnAttribute = property.GetCustomAttribute<ColumnAttribute>();
            string column = columnAttribute?.Name ?? FormatName(property.Name);

            if (column == "id" && Options.UseComposedId)
            {
                column = $"{column}_{GetTable(type, false)}";
            }

            string columnName = $"{GetTable(type)}.{column}";
            return columnName;
        }

        private IEnumerable<KeyValuePair<string, PropertyInfo>> GetKeyColumns(Type type)
        {
            IDictionary<string, PropertyInfo> columns = GetColumns(type);

            IEnumerable<KeyValuePair<string, PropertyInfo>> keyColumns = columns
                    .Where(c => c.Value.GetCustomAttribute<KeyAttribute>(true) != null)
                    .OrderBy(c => c.Value.GetCustomAttribute<KeyAttribute>(true).Order);

            if (!keyColumns.Any())
            {
                keyColumns = columns.Where(c => c.Value.Name == "Id");
            }

            return keyColumns;
        }

        private IEnumerable<KeyValuePair<string, PropertyInfo>> GetNonAutoGeneratedColumns(Type type)
        {
            IDictionary<string, PropertyInfo> columns = GetColumns(type);

            IEnumerable<KeyValuePair<string, PropertyInfo>> nonAutoGenerated = columns
                .Where(c => c.Value.GetCustomAttribute<KeyAttribute>() == null || !c.Value.GetCustomAttribute<KeyAttribute>().AutoGenerated);

            return nonAutoGenerated;
        }

        private KeyValuePair<string, PropertyInfo> GetIdentityColumn(Type type)
        {
            IDictionary<string, PropertyInfo> columns = GetColumns(type);

            KeyValuePair<string, PropertyInfo> identityColumn = columns
                .FirstOrDefault(c => c.Value.GetCustomAttribute<KeyAttribute>() != null && c.Value.GetCustomAttribute<KeyAttribute>().AutoGenerated);

            return identityColumn;
        }
    }
}
