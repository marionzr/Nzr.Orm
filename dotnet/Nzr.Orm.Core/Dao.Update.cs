using Nzr.Orm.Core.Extensions;
using Nzr.Orm.Core.Sql;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Nzr.Orm.Core
{
    /// <summary>
    /// Partial class Dao.
    /// Contains all methods related to insert operations.
    /// </summary>
    public partial class Dao
    {
        #region Operations
        private int DoUpdate(object entity)
        {
            Set set = BuildSet(entity);
            Where where = BuildWhereFromIds(entity);

            return DoUpdate(entity.GetType(), set, where);
        }
        private int DoUpdate<T>(Set set, Where where) => DoUpdate(typeof(T), set, where);

        private int DoUpdate(Type type, Set set, Where where)
        {
            string sql = BuildUpdateSql(type, set, where);
            Parameters parameters = BuildUpdateParameters(type, set, where);
            int result = ExecuteNonQuery(sql, parameters);

            return result;
        }

        #endregion

        #region SQL

        private string BuildUpdateSql(Type type, Set set, Where where)
        {
            IDictionary<string, PropertyInfo> columns = GetColumns(type);

            IList<string> setParameters = set.Select(s =>
            {
                KeyValuePair<string, PropertyInfo> column = columns.First(kvp => kvp.Value.Name == s.Item1);
                StringBuilder whereFilter = new StringBuilder($"{column.Key} = ");

                if (s.Item2 == null)
                {
                    whereFilter.Append(" NULL");
                }
                else
                {
                    whereFilter.Append($" @{FormatParameters(column.Key)}");
                }

                return whereFilter.ToString();
            }).ToList();

            IList<string> whereParameters = BuildWhereFilters(columns, where);
            string sql = $"UPDATE {GetTable(type)} SET {string.Join(", ", setParameters)} WHERE {string.Join(" AND ", whereParameters)}";

            return sql;
        }

        #endregion

        #region Parameters

        private Parameters BuildUpdateParameters(Type type, Set set, Where where)
        {
            Parameters parameters = new Parameters();
            IDictionary<string, PropertyInfo> columns = GetColumns(type);

            set.ForEach((parameter, value) =>
            {
                KeyValuePair<string, PropertyInfo> column = columns.First(c => c.Value.Name == parameter);
                parameters.Add($"@{FormatParameters(column.Key)}", value);
            });

            where.ForEach((parameter, condition, value) =>
            {
                KeyValuePair<string, PropertyInfo> column = columns.First(c => c.Value.Name == parameter);
                parameters.Add($"@{FormatParameters(column.Key)}", value);
            });

            return parameters;
        }

        private Set BuildSet(object entity)
        {
            Set set = new Set();
            IEnumerable<KeyValuePair<string, PropertyInfo>> nonIdentityColumns = GetNonAutoGeneratedColumns(entity.GetType());
            nonIdentityColumns.ForEach(c => set.Add(c.Value.Name, GetValue(c.Value, entity)));

            return set;
        }

        #endregion
    }
}
