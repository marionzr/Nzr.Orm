using Nzr.Orm.Core.Extensions;
using Nzr.Orm.Core.Sql;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace Nzr.Orm.Core
{
    /// <summary>
    /// Partial class Dao.
    /// Contains all methods related to insert operations.
    /// </summary>
    public partial class Dao
    {
        #region Operations
        private int DoUpdate(object entity, int? expectedResult = null)
        {
            Set set = BuildSet(entity);
            Where where = BuildWhereFromIds(entity);
            return DoUpdate(entity.GetType(), set, where, expectedResult);
        }
        private int DoUpdate<T>(Set set, Where where, int? expectedResult = null) => DoUpdate(typeof(T), set, where, expectedResult);

        private int DoUpdate(Type type, Set set, Where where, int? expectedResult = null)
        {
            string multiPartIdentifier = where.FirstOrDefault(w => w.Item1.Contains("."))?.Item1;

            if (multiPartIdentifier != null)
            {
                throw new NotSupportedException($"Multi Part Identifier ({multiPartIdentifier}) is not yet supported for update operation. Use ExecuteNonQuery with a custom SQL.");
            }

            BuildMap(type);
            string sql = BuildUpdateSql(type, set, where);
            Parameters parameters = BuildUpdateParameters(type, set, where);
            int result = DoExecuteNonQuery(sql, parameters, expectedResult);

            return result;
        }

        #endregion

        #region SQL

        private string BuildUpdateSql(Type type, Set set, Where where)
        {
            IList<string> setSql = set.Select(s =>
            {
                Mapping mapping = GetColumnByPropertyName(type, s.Item1);
                StringBuilder setExpression = new StringBuilder($"{mapping.FullColumnName} = ");

                if (s.Item2 == null)
                {
                    setExpression.Append(" NULL");
                }
                else
                {
                    setExpression.Append($" @{FormatParameters(mapping.FullColumnName)}_{s.Item3}");
                }

                return setExpression.ToString();
            }).ToList();

            string whereFilters = BuildWhereFilters(where);
            string sql = $"UPDATE {GetTableName(type)} SET {string.Join(", ", setSql)} WHERE {whereFilters}";

            return sql;
        }

        #endregion

        #region Parameters

        private Parameters BuildUpdateParameters(Type type, Set set, Where where)
        {
            Parameters parameters = new Parameters();

            set.ForEach((parameter, value, index) =>
            {
                if (value != null)
                {
                    Mapping mapping = GetColumnByPropertyName(type, parameter);
                    parameters.Add($"@{FormatParameters(mapping.FullColumnName)}_{index}", value);
                }
            });

            where.ForEach((parameter, condition, value, index, conjunction) =>
            {
                if (value != null)
                {
                    Mapping mapping = GetColumnByPropertyName(type, parameter);
                    parameters.Add($"@{FormatParameters(mapping.FullColumnName)}_{index}", value);
                }
            });

            return parameters;
        }

        private Set BuildSet(object entity)
        {
            Set set = new Set();
            IEnumerable<KeyValuePair<string, PropertyInfo>> nonIdentityColumns = GetNonAutoGeneratedColumns(entity.GetType());
            nonIdentityColumns.ForEach(c => set.Add(c.Value.Name, GetValue(c.Value, entity)));

            return set;
        }

        #endregion
    }
}
